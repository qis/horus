uniform float4x4 ViewProj;
uniform texture2d image;    // 2560x1080 RGBA background
uniform texture2d target;   // 1024x1024 RGBA overlay

sampler_state textureSampler {
  Filter   = Linear;
  AddressU = Border;
  AddressV = Border;
};

struct VertDataIn {
  float4 pos : POSITION;
  float2 uv  : TEXCOORD0;
};

struct VertDataOut {
  float4 pos : POSITION;
  float2 uv  : TEXCOORD0;
  float2 uv2 : TEXCOORD1;
};

VertDataOut VSDefault(VertDataIn vi) {
  // Display and scan sizes (must be synchronized with src/scan.hpp).
  static const float dw = 2560.0;  // display width
  static const float dh = 1080.0;  // display height
  static const float sw = 1024.0;  // scan width
  static const float sh = 1024.0;  // scan height

  // Scan offset to display (horizontal).
  static const float sx = (dw - sw) / 2.0;

  // Scan offset to display (vertical).
  static const float sy = (dh - sh) / 2.0;

  VertDataOut vo;
  vo.pos = mul(float4(vi.pos.xyz, 1.0), ViewProj);
  vo.uv  = vi.uv;
  vo.uv2 = vi.uv;

  vo.uv2.x *= dw / sw;
  vo.uv2.y *= dh / sh;
  vo.uv2.x -= sx / sw;
  vo.uv2.y -= sy / sh;

  return vo;
}

float4 PSColorMaskRGBA(VertDataOut vi) : TARGET {
  float4 color = image.Sample(textureSampler, vi.uv);
  float4 overlay = target.Sample(textureSampler, vi.uv2);
  if (overlay.a == 1.0) {
    color.rgb = overlay.rgb;
  }
  return color;
}

technique Draw {
  pass {
    vertex_shader = VSDefault(vi);
    pixel_shader  = PSColorMaskRGBA(vi);
  }
}